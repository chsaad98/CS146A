def isBadVersion(version):
  
  bad_versions = {4, 5, 6}  
  return version in bad_versions
def firstBadVersion(n):
  left = 1
  right = n

  while left < right:
      mid = left + (right - left) // 2
      if isBadVersion(mid):
          right = mid
      else:
          left = mid + 1

  return left

n = 10  
print("The first bad version is:", firstBadVersion(n)



Java: 

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int left = 1;
        int right = n;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (isBadVersion(mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }
}


python solution:
we start by checking version if it is bad or not 
Depending on the result we know if the bad version is before or after the one we checked.
we keep searching untill we find the first bad version.
and stop when we  finfd the first bad version.

java solution: 
firstBadVersion used to find the first bad version
Based on the result it updates either right or left to continue the search
when search finish and reoght and left pointers met the functions returns left pointer value represent first bad version . 
