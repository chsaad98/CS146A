
class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        int[][] adjMatrix = new int[n][n];
        for (int[] edge : edges) {
            adjMatrix[edge[0]][edge[1]] = edge[2];
            adjMatrix[edge[1]][edge[0]] = edge[2];
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    adjMatrix[i][j] = Math.min(adjMatrix[i][j], adjMatrix[i][k] + adjMatrix[k][j]);
                }
            }
        }
        int[] reachableCities = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (adjMatrix[i][j] <= distanceThreshold && i != j) {
                    reachableCities[i]++;
                }
            }
        }
        int minReachable = Integer.MAX_VALUE;
        int bestCity = -1;
        for (int i = 0; i < n; i++) {
            if (reachableCities[i] <= minReachable && reachableCities[i] > 0) { 
                if (reachableCities[i] < minReachable) {
                    minReachable = reachableCities[i];
                    bestCity = i;
                } else if (i > bestCity) { 
                }
            }
        }

        return bestCity;
    }
}
